Java Naming Convention: 
1) Пакеты - строчные, классы, исключения и интерфейсы - UpperCamelCase, методы и переменные - lowerCamelCase, константы и элементы Enum - SCREAMING_SNAKE_CASE.
2) Классы - существительные, при этом обычно без аббревиатур. Методы - глаголы. Интерфейсы - прилагательные (обычно, но могут быть и существительными (List, Comparator)).
3) Абстрактные классы начинаются с Abstract, исключения - заканчиваться на Exception.

Общие:
1) Перепроверь скобочки ВО ВСЕЙ программе ВО ВСЕХ строчках.
2) Структура файла: начальный комментарий (название, версия, дата, копирайт), пакет и импорты, сам код.
3) Описание классов и интерфейсов: javadoc, объявление, внутренние пояснения (комментарий), static переменные, обычные переменные, конструктор, методы.
4) Переменные группируются по доступу в следующем порядке: public, protected, private-protected, private. Методы - по функционалу.
5) Переносы.
  1) Строки не длинее 80 символов. Перенос по запятым или операторам, чем высокоуровневее, тем лучше.
  2) Начало переноса на том же уровне, 
                     что и начало выражения.
  3) Если после переноса будет слишком далеко уходить 
        - следует использовать 8 пробелов.
  4) Для if следует использовать 8 пробелом по умолчанию - это позволит не пропустить вложенные операторы.
  5) Тернарный оператор следует переносить по 
                                          ? и
                                          :.

Комментарии:
1) Комментировать код без приписки TODO рядом - грех.
2) Комментировать лучше на английском.

Методы:
1) Если есть желание сделать возврат у метода кода ошибки - надо возвращать boolean (и, возможно, пару кастомных исключений).

Интерфейсы:
1) Хочешь сделать метод сравнения - добавь Comparator или Comparable.

Исключения:
1) Для проверки на null надо написать своё исключение, а не использовать NullPointerException.

Многопоточность:
1) Перепроверить вообще всё. Думать, что буквально после каждой неатомарной операции что-то идёт не так.
2) Поток запускать на start(), а не run().
3) Сказано сделать один метод потокобезопасным - сделай потокобезопасными и все используемые объекты (например, коллекции). А ещё лучше - и все остальные методы.



Если это грязно, но это улучшит качество кода - сделай это.
