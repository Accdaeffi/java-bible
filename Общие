Java Naming Convention: 
1) Пакеты - строчные, классы, исключения и интерфейсы - UpperCamelCase, методы и переменные - lowerCamelCase, константы и элементы Enum - SCREAMING_SNAKE_CASE.
2) Классы - существительные, при этом обычно без аббревиатур. Методы - глаголы. Интерфейсы - прилагательные (обычно, но могут быть и существительными (List, Comparator)).
3) Абстрактные классы начинаются с Abstract, исключения - заканчиваться на Exception.

Общие:
1) Перепроверь скобочки ВО ВСЕЙ программе ВО ВСЕХ строчках.
2) Структура файла: начальный комментарий (название, версия, дата, копирайт), пакет и импорты, сам код.
3) Описание классов и интерфейсов: javadoc, объявление, внутренние пояснения (комментарий), static переменные, обычные переменные, конструктор, методы.
4) Переменные группируются по доступу в следующем порядке: public, protected, private-protected, private. Методы - по функционалу.
5) Переносы.
  1) Строки не длинее 80 символов. Перенос по запятым или операторам, чем высокоуровневее, тем лучше.
  2) Начало переноса на том же уровне, 
                     что и начало выражения.
  3) Если после переноса будет слишком далеко уходить 
        - следует использовать 8 пробелов.
  4) Для if следует использовать 8 пробелом по умолчанию - это позволит не пропустить вложенные операторы.
  5) Тернарный оператор следует переносить по 
                                          ? и
                                          :.
6) Переменный объявляются в одну строчку - и сразу же инициализируются. Исключение - если их начальное значение зависит от каких-то вычислений.
7) Переменные объявляются в начале блока {} (о да, запахло c89). Исключение - цикл for, там можно и внутри.
8) Между названием метода и открывающей скобочкой входных значений ("(") нет пробела. А вот перед открывающей скобочка блока метода ("{") - есть.
9) Методы и классы разделены пустой линией.
10) Выражения.
  1) Одна строчка - одно выражение.
  2) return с выражением - только если от этого в какой-то мере будет понятнее.
  3) if - ВСЕГДА со скобочками.
  4) Пустой for (где в цикле ничего не делается) - без скобочек, сразу точка с запятой.
  5) В switch - либо break, либо специальный комментарий, что /* falls through */. Default обязателен.
11) 2 пустые строчки - между секция исходников (хз вообще, что это) и между объявление класса и интерфейса.
    1 пустая строчка - между методами, перед комментариями, между объявлениями переменных и первым выражением внутри метода, между логическими сегментами в методе.
12) Пробелы должны быть после:
  1) Ключевых слов, после которых скобочка: while (true).
  2) После запятых в списке аргументов.
  3) Вокруг всех бинарных (2 аргумента) операторов.
  4) В объявлении for - после каждого ;.
  5) После каждого явного приведения типа.
13) МОДИФИКАТОРЫ ДОСТУПА
14) И FINAL КО ВСЕМУ, ЧТО МОЖНО
15) К статическому методу - стучаться через класс, а не через объект (Class.method(), не classObject.method()).
16) Если число не 1,0,-1 - надо использовать константу.
17) В сложных выражениях - скобочки вокруг каждого выражения. Не все хорошо знают порядок работы операторов.
18) Бинарный оператор в начале тернарного оператора должен быть в скобочках: (x >= 0) ? x : -x;.
19) XXX в комментарии чтобы отметить рабочий говнокод, FIXME - нерабочий говнокод.
20) Предложения надо делить на свои - например, слой определения команды, слой доступа к БД, слой выполнения команд...

Комментарии:
1) Комментировать код без приписки TODO рядом - грех.
2) Комментировать лучше на английском.
3) В javadoc - спецификация (что получает, что возвращает, что делает), в обычных - особенности реализации.
4) Комментарии должны освещать непонятные моменты реализации - следовательно, если много комментариев, имеет смысл переписать кусок кода.
5) Коробочку из * не делать и извращаться с символами не надо.
6) Перед блочным комментарием - перенос строки.
7) В случае комментариев в конце строки - они должны начинаться в одном и том же месте в разных частях кода.
8) // следует использовать для комментирования кода.
9) Если для одного класса/метода надо и javadoc, и обычный комментарий - сначала javadoc, потом объявление, а потом (без пробела) - обычный.

Методы:
1) Если есть желание сделать возврат у метода кода ошибки - надо возвращать boolean (и, возможно, пару кастомных исключений).

Интерфейсы:
1) Хочешь сделать метод сравнения - добавь Comparator или Comparable.

Исключения:
1) Кастомные исключения лучше наследовать от RuntimeException - чтобы не прописывать throws во всех методах.
2) Когда стоит делать кастомные?
  1) Для проверки на null надо написать своё исключение, а не использовать NullPointerException.
  2) Но в то же время кастомные лучше использовать для специальных ситуаций бизнес-логики, а не в общем.  

Многопоточность:
1) Перепроверить вообще всё. Думать, что буквально после каждой неатомарной операции что-то идёт не так.
2) Поток запускать на start(), а не run().
3) Сказано сделать один метод потокобезопасным - сделай потокобезопасными и все используемые объекты (например, коллекции). А ещё лучше - и все остальные методы.

Пакеты:
1) Импорт пакетов лучше без звёздочки - по крайней мере, если нет ЧЁТКОЙ уверенности, что вот вообще все классы из пакета будут использованы.

Веб:
1) Лучше сделать раздельные классы для хранения в БД и для передачи на фронт. Для маппинга можно использовать MapStruct.
2) При создании API лучше прописать версию - т.е. путь будет не /api/foo, а /api/v1/foo. Позволит создавать новую версию API, не словам имеющимся клиентам ничего.

JAXB:
1) Позволяет из .xsd (описания, что в каком виде отдавать, XML Schema) генерировать код.

Источники:
Java Code Convention: https://www.oracle.com/java/technologies/javase/codeconventions-introduction.html
Фидбэк с тестовых заданий
