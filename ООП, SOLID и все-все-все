Базовые принципы ООП.

Инкапсуляция - размещение в классе функционала, связанным с этим классом (метод .length() должен быть внутри String, а не снаружи висеть). В некоторых языках (Java) - дополнительно требуется сокрытие того, что не надо (например, полей или же приватных методов).
Наследование - новые классы могут базироваться на основе существующих, наследуя от них поля и методы.
Полиморфизм - один и тот же участок кода в разном контексте может делать различный функционал с различными типами данных. Тут и переопределение методов в наследниках и перегрузка с другими типами и создание интерфейсов вместо классов....
Абстракция (новое, полуканон) - надо выделять важное и отбрасывать ненужное. Например, в чат-боте нам нужно имя человека, но не нужен цвет его волос. 

SOLID - принципы дизайна классов.
Вообще, их 5, но если сильно постараться, то можно найти побольше. Правда проблема в том, что их писали программисты на C++... Но хуже от этого быть не должно.

10 заповедей ООП (ну или не 10, изначально было 21).
1) Для каждой библиотеки - свой класс-прослойка.
2) Множество return - только для дебаггинга (дебаггер в помощь) и возврата кода ошибок (кастомные ошибки). (Т.е. это грех в Java)
3) Классы (интерфейсы, модули...) должны быть открыты для расширения, но закрыты для модификации. (Open-Closed Principle).
4) Классы-наследники должны быть способны использоваться там, где подходит их предок (Liskov Substitution Principle).
5) Детали должны зависеть от абстракций, но не наоборот (Dependency Inversion Principle).
6) Единица переиспользуемости должна быть равна единице релиз. Только компоненты, релиз которых отмечен в системе отслеживания, должны быть использованы.
7) Классы в одной единице релиза должны использоваться все вместе - иначе их можно разделить на несколько единиц переиспользуемости.
8) Структура зависимостей должна быть DAG - ориентированный ациклический граф.
9) Чем глубже код в структуре зависимостей - тем стабильнее он должен быть.
10) Если есть возможность - надо использовать паттерны.
11) При пересечении 2 парадигм программирования - следует создать интерфейс между ними. Не стоит засорять одну парадигму другой.

SOLID и все-все-все.

Принципы дизайна классов: 
SRP - Single Responsibility Principle. У класса должна быть лишь одна и только одна причина для изменения. Каждый класс должен иметь лишь 1 ответственность - и, в идеале, лишь он один должен изменяться при изменении этой ответственности. При этом важно понимать, возможно ли это изменение в принципе - или нет.
Примеры, когда надо применять - вынос отрисовки, работы с бд или же бизнес-логики за пределы POJO.

OCP - Open-Closed Principle. Должна иметься возможность расширить функционал класса без его модификации. Если кратко - надо везде брать интерфейсы и выносить в них все те функции, которые могут понадобиться семейству классов. Например, у фигур должен быть интерфейс Drawable с методом draw(). Проблема в том, что это может противоречить SRP.
Краткие выводы: поля - приватные, а глобальные переменные не нужны.

LSP - Liskov Substitution Principle. Наследумые классы должны быть способны заменить класс-предок, притом исполняющий класс не должен заметить разницы. Пример - есть класс-предок прямоугольник с методами setWidth() и setHeight() и класс-потомок квадрат. 

ISP - Interface Segregation Principle. Интерфейсы должны небольшими и специфичными.

DIP - Dependency Inversion Principle. Зависимости от абстракций, а не от реализаций. "Высокоуровненвые модули не должны зависеть от низкоуровневых. Оба должны зависеть от абстракций."
Зависимости должны быть интерфейсами, а не классами - тогда изменение реализации (или замена на другую) не потребует изменение вызываемого кода. Кроме того, будет легко расширить путём создания новых реализаций интерфейса.

Принципы дизайна пакетов (в данном случае пакет - это отдельный бинарный файл, например .jar):
REP - Release Reuse Equivalency Principle. Единица переиспользования - единица релиза.
CCP - Common Closure Principle. Классы, которые изменяются вместе, пакуются вместе.
CRP - Common Reuse Principle. Классы, которые используются вместе, пакуются вместе.

ADP - Acyclic Dependencies Principle. Граф зависимостей должен не иметь циклов.
SDP - Stable Dependencies Principle. Чем глубже пакет в графе зависимостей - тем стабильнее он должен быть.
SAP - Stable Abstractions Principle. Абстрактность увеличивается со стабильностью.

Какой дизайн классов плохой?
Жёсткий - изменения трудно вносить, потому что они потребуют изменения множества других частей кода.
Хрупкость - изменение в одном месте может привести к падению в другом.
Иммобильность - трудно использовать часть в другой программе, т.к. классы слишком тесно связаны.

Источники: 
Полилог об общих принципах ООП (10 заповедей ООП): https://groups.google.com/g/comp.object/c/WICPDcXAMG8?hl=en&pli=1#adee7e5bd99ab111

Single Responsibility Principle: https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view?resourcekey=0-AbuGpXQzwZcUGExkktKt0g
Open-Closed Principle: https://drive.google.com/file/d/0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1/view?resourcekey=0-FsS837CGML599A_o5D-nAw
Liskov Substitution Principle: https://drive.google.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/view?resourcekey=0-WMUrDARPkqqsxNNdno6ksw
Interface Segregation Principle: https://drive.google.com/file/d/0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi/view?resourcekey=0-3H2Ld4l-dIZZVRmHSpNLcA
Dependency Inversion Principle: https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view?resourcekey=0-jRJy8Mi4CltX8KX84BqLFQ
