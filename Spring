Dependency Injection
@Qualifier("beanName") - чтобы указать, какой именно брать. Вешается в момент иньекции.
@Profile("test") - указывает, к какому профилю относится бин. Сам профиль меняется в .properties файле как "spring.profile.active=test".
@Primary - чтобы сделать приоритетным для выбора (если есть несколько одинаковых) и другие методы не используются.

Жизненный цикл бина
1) Создание инстанса.
2) Заполнение полей
3) Работа с *Awarness
  3.1) Установка имени бина, если BeanNameAwarness
  3.2) Установка фабрики бинов, если BeanFactoryAwarness
  3.3) Установка контекста, если ApplicationContextAwarness
4) Преинициализация - вызовы @PostConstruct методов в порядке определения в класе. + отработка PreInitialization от BeanPostProcessors
5) Если имплементирован InitializingBean - вызов afterPropertiesSet() метода.
6) Вызов метода, указанного в @Bean(initMethod="foo")
7) Отработка PostInitialization от BeanPostProcessors
8) ЖИВОЙ
9) Контейнер посылает сигнал на завершение.
10) Отработка @PreDestroy методов в порядке определения в классе.
11) Если импелементирован DisposableBean - отработка destroy()
12) Вызов метода, указанного в @Bean(destroyMethod="bar")
13) Смерть.

External Properties
Берутся из аргументов командной строки, переменных окружения и файлов с параметрами. Возможна перезапись в порядке написания (т.е. аргументы командной строки - самое важное).
Spring сам берёт значения из application.properties в ресурсах, но можно указать дополнительные файлы с аннотацией @PropertySource("classpath:foo.properties").

Если есть значение foo.bar, то задача его значения будет выглядеть так:
properties: foo.bar=test
env var: FOO_BAR=test
CL args: --foo.bar=test
Да, они все переписывают одно и то же значение.

properties файлы дополнительно могут переписывать друг друга - например, про использовании профилей. Также они могут автоматически подключаться при смене профиля.
Так, например, про использовании профиля "dev" кроме application.properties будет автоматически подключен ещё application-dev.properties.

Если все значения в одном файле имеют одинаковый префикс (например, db.foo, db.bar...), можно использовать аннотацию @ConfigurationProperties("db"), чтобы не писать каждый раз. 
Правда, это также потребует наличия @Configuration.

