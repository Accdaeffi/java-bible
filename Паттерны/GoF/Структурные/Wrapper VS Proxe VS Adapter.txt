Все эти шаблоны схожи тем, что создают некоторую "обертку" вокруг класса. 

Однако различаются они тем, какой интерфейс предоставляют и что делают с функциональностью оригинального класса.

Заместитель (proxy) оборачивает некоторый класс и предоставляет такой же интерфейс. Цель -- "притвориться" оригинальным классом и скрыть от клиента детали. Типичные примеры использования -- ленивая инициализация оборачиваемого класса или оборачивание вызовов стороннего сервиса.

Декоратор (wrapper) также оборачивает некоторый класс и предоставляет такой же или расширенный интерфейс. Иногда декоратор называют "умным заместителем" (smart proxy). Т.е. декоратор может притворяться оригинальным классом и при этом расширять его функциональность. Пример: у вас есть заместитель, который прячет вызовы к стороннему сервису. Можно создать декоратор, который будет оборачивать и кэшировать результаты вызовов. Другой пример: нужно расширить функциональность оригинального класса, но он закрыт для наследования. Создается декоратор, который расширяет интерфейс оригинального класса.

Адаптер (adapter) также оборачивает некоторый класс, но при этом предоставляет другой интерфейс. Т.е. используется в случаях, когда есть класс с нужными данными и поведением, но с неподходящим интерфейсом.

Итого:

---------------------------------------------------------------------------
| Шаблон      | Что делает с интерфейсом | Что делает с функциональностью |
---------------------------------------------------------------------------
| Заместитель | Не изменяет              | Не изменяет                    |
---------------------------------------------------------------------------
| Декоратор   | Не изменяет/расширяет    | Расширяет                      |
---------------------------------------------------------------------------
| Адаптер     | Изменяет                 | Не изменяет                    |
---------------------------------------------------------------------------
